// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// SMF Members (Users)
model SmfMember {
  idMember         Int      @id @map("id_member")
  memberName       String   @map("member_name") @db.VarChar(80)
  realName         String?  @map("real_name") @db.VarChar(255)
  emailAddress     String   @map("email_address") @db.VarChar(255)
  passwd           String   @db.VarChar(64)
  passwordSalt     String?  @map("password_salt") @db.VarChar(255)
  posts            Int      @default(0)
  dateRegistered   Int      @map("date_registered")
  lastLogin        Int?     @map("last_login")
  idGroup          Int      @map("id_group") @default(0)
  avatar           String?  @db.Text
  signature        String?  @db.Text
  personalText     String?  @map("personal_text") @db.Text
  location         String?  @db.VarChar(255)
  websiteTitle     String?  @map("website_title") @db.VarChar(255)
  websiteUrl       String?  @map("website_url") @db.VarChar(255)
  birthdate        DateTime? @db.Date
  nbCritiques      Int      @default(0) @map("nb_critiques")
  nbSynopsis       Int      @default(0) @map("nb_synopsis")
  nbContributions  Int      @default(0) @map("nb_contributions")
  experience       Int      @default(0)

  // Relations
  refreshTokens    AkRefreshToken[]
  passwordResetTokens AkPasswordResetToken[]
  reviews          AkCritique[]
  adminAuditLogs   AdminAuditLog[]
  articles         AkWebzineArticle[]
  articleComments  AkWebzineComment[]

  @@map("smf_members")
}

// Refresh Tokens
model AkRefreshToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique @db.VarChar(255)
  userId      Int       @map("user_id")
  expiresAt   DateTime  @map("expires_at") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  isRevoked   Boolean   @default(false) @map("is_revoked")
  deviceInfo  Json?     @map("device_info") @db.JsonB
  ipAddress   String?   @map("ip_address") @db.Inet
  userAgent   String?   @map("user_agent") @db.Text

  // Relations
  user        SmfMember @relation(fields: [userId], references: [idMember], onDelete: Cascade)

  @@map("ak_refresh_tokens")
}

// Password Reset Tokens
model AkPasswordResetToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique @db.VarChar(255)
  userId      Int       @map("user_id")
  email       String    @db.VarChar(255)
  expiresAt   DateTime  @map("expires_at") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  usedAt      DateTime? @map("used_at") @db.Timestamptz
  isUsed      Boolean   @default(false) @map("is_used")
  ipAddress   String?   @map("ip_address") @db.Inet
  userAgent   String?   @map("user_agent") @db.Text

  // Relations
  user        SmfMember @relation(fields: [userId], references: [idMember], onDelete: Cascade)

  @@map("ak_password_reset_tokens")
}

// Animes
model AkAnime {
  idAnime      Int       @id @map("id_anime")
  niceUrl      String?   @map("nice_url") @db.VarChar(255)
  titre        String    @db.VarChar(255)
  titreOrig    String?   @map("titre_orig") @db.Text
  annee        Int?
  nbEp         Int?      @map("nb_ep")
  image        String?   @db.VarChar(255)
  studio       String?   @db.VarChar(100)
  dateAjout    DateTime? @map("date_ajout") @db.Timestamptz
  synopsis     String?   @db.Text
  statut       Int       @default(0)
  realisateur  String?   @db.VarChar(255)
  nbReviews    Int?      @default(0) @map("nb_reviews")
  moyenneNotes Float?    @default(0) @map("moyennenotes") @db.Real

  // Relations
  reviews      AkCritique[]
  episodes     AkAnimesEpisode[]
  businessRelations AkBusinessToAnime[]

  @@map("ak_animes")
}

// Anime Episodes
model AkAnimesEpisode {
  idEpisode    Int       @id @map("id_episode")
  idAnime      Int       @map("id_anime")
  numero       Int
  titre        String?   @db.VarChar(255)
  resume       String?   @db.Text
  dateAjout    DateTime? @map("date_ajout") @db.Timestamptz

  // Relations
  anime        AkAnime   @relation(fields: [idAnime], references: [idAnime], onDelete: Cascade)

  @@map("ak_animes_episodes")
}

// Mangas
model AkManga {
  idManga      Int       @id @map("id_manga")
  niceUrl      String?   @map("nice_url") @db.VarChar(255)
  titre        String    @db.Text
  auteur       String?   @db.Text
  annee        String?   @db.VarChar(4)
  nbVolumes    String?   @map("nb_volumes") @db.VarChar(255)
  image        String?   @db.VarChar(255)
  nbReviews    Int?      @default(0) @map("nb_reviews")
  moyenneNotes Float?    @default(0) @map("moyennenotes") @db.Real
  dateAjout    DateTime? @map("date_ajout") @db.Timestamptz
  synopsis     String?   @db.Text
  statut       Int       @default(0)
  editeur      String?   @db.VarChar(255)

  // Relations
  reviews      AkCritique[]
  businessRelations AkBusinessToManga[]

  @@map("ak_mangas")
}

// Business entities (Studios, Authors, Publishers, etc.)
model AkBusiness {
  idBusiness            Int       @id @default(autoincrement()) @map("id_business")
  niceUrl               String?   @map("nice_url") @db.VarChar(255)
  type                  String?   @db.VarChar(255)
  denomination          String?   @db.VarChar(255)
  autresDenominations   String?   @map("autres_denominations") @db.Text
  image                 String?   @db.VarChar(255)
  date                  String?   @db.VarChar(255)
  origine               String?   @db.VarChar(255)
  siteOfficiel          String?   @map("site_officiel") @db.VarChar(255)
  notes                 String?   @db.Text
  relations             Int?      @default(-1)
  nbClics               Int?      @default(0) @map("nb_clics")
  nbClicsDay            Int?      @map("nb_clics_day")
  nbClicsWeek           Int?      @map("nb_clics_week")
  nbClicsMonth          Int?      @map("nb_clics_month")
  statut                Int       @default(1)
  dateAjout             DateTime? @map("date_ajout") @db.Timestamptz
  dateModification      Int?      @map("date_modification")
  latestCache           String?   @map("latest_cache")

  // Relations
  animeRelations        AkBusinessToAnime[] @relation("BusinessToAnime")
  mangaRelations        AkBusinessToManga[] @relation("BusinessToManga")

  @@map("ak_business")
}

// Business to Anime Relations
model AkBusinessToAnime {
  idRelation  Int       @id @default(autoincrement()) @map("id_relation")
  idAnime     Int?      @map("id_anime")
  idBusiness  Int?      @map("id_business")
  type        String?   @db.VarChar(100)
  precisions  String?   @db.Text
  doublon     Int?      @db.SmallInt

  // Relations
  anime       AkAnime?  @relation(fields: [idAnime], references: [idAnime], onDelete: Cascade)
  business    AkBusiness? @relation("BusinessToAnime", fields: [idBusiness], references: [idBusiness], onDelete: Cascade)

  @@map("ak_business_to_animes")
}

// Business to Manga Relations
model AkBusinessToManga {
  idRelation  Int       @id @default(autoincrement()) @map("id_relation")
  idManga     Int?      @map("id_manga")
  idBusiness  Int?      @map("id_business")
  type        String?   @db.VarChar(100)
  precisions  String?   @db.Text
  doublon     Int?      @db.SmallInt

  // Relations
  manga       AkManga?  @relation(fields: [idManga], references: [idManga], onDelete: Cascade)
  business    AkBusiness? @relation("BusinessToManga", fields: [idBusiness], references: [idBusiness], onDelete: Cascade)

  @@map("ak_business_to_mangas")
}

// Reviews/Critiques
model AkCritique {
  idCritique   Int       @id @map("id_critique")
  niceUrl      String?   @map("nice_url") @db.VarChar(255)
  titre        String?   @db.Text
  critique     String?   @db.Text
  notation     Int?      @default(0)
  dateCritique DateTime? @map("date_critique") @db.Timestamp
  statut       Int       @default(0)
  questions    String?   @db.Text
  acceptImages Int?      @map("accept_images")
  evaluation   String?   @db.Text
  idMembre     Int       @default(0) @map("id_membre")
  idAnime      Int       @default(0) @map("id_anime")
  idManga      Int       @default(0) @map("id_manga")
  idOst        Int       @default(0) @map("id_ost")
  idJeu        Int       @default(0) @map("id_jeu")
  causeSuppr   String?   @map("cause_suppr") @db.Text
  nbClics      Int?      @map("nb_clics")
  nbClicsDay   Int?      @default(0) @map("nb_clics_day")
  nbClicsWeek  Int?      @map("nb_clics_week")
  nbClicsMonth Int?      @map("nb_clics_month")
  nbCarac      Int?      @map("nb_carac")
  popularite   Float?    @db.Real
  classementPopularite Int? @map("classement_popularite")
  variationPopularite String? @map("variation_popularite") @db.Text

  // Relations
  membre       SmfMember @relation(fields: [idMembre], references: [idMember], onDelete: Cascade)
  anime        AkAnime?  @relation(fields: [idAnime], references: [idAnime], onDelete: Cascade)
  manga        AkManga?  @relation(fields: [idManga], references: [idManga], onDelete: Cascade)

  @@map("ak_critique")
}

// Admin Audit Log
model AdminAuditLog {
  id          Int       @id @default(autoincrement())
  adminId     Int       @map("admin_id")
  action      String    @db.VarChar(100)
  targetType  String    @map("target_type") @db.VarChar(50)
  targetId    Int?      @map("target_id")
  reason      String?   @db.Text
  metadata    Json?     @db.JsonB
  ipAddress   String?   @map("ip_address") @db.Inet
  userAgent   String?   @map("user_agent") @db.Text
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  admin       SmfMember @relation(fields: [adminId], references: [idMember], onDelete: Cascade)

  @@map("admin_audit_log")
}

// Articles System Models

model AkWebzineArticle {
  idArt            Int       @id @default(autoincrement()) @map("id_art")
  titre            String?   @db.Text
  niceUrl          String?   @map("nice_url") @db.VarChar(255)
  date             DateTime  @db.Timestamp
  img              String?   @db.VarChar(255)
  imgunebig        String?   @db.VarChar(255)
  imgunebig2       String?   @db.VarChar(255)
  texte            String?   @db.Text
  auteur           Int
  auteursMultiples String?   @map("auteurs_multiples") @db.Text
  metaDescription  String?   @map("meta_description") @db.Text
  tags             String?   @db.Text
  videos           String?   @db.Text
  nbCom            Int       @map("nb_com")
  nbClics          Int       @map("nb_clics")
  trackbacksOpen   Int       @map("trackbacks_open") @db.SmallInt @default(1)
  onindex          Int       @db.SmallInt @default(0)
  nl2br            Int       @db.SmallInt @default(1)
  alreadyPing      Int       @map("already_ping") @db.SmallInt
  statut           Int?      @db.SmallInt @default(0)

  // Relations
  author           SmfMember @relation(fields: [auteur], references: [idMember], onDelete: Cascade)
  categories       AkWebzineArt2Cat[]
  comments         AkWebzineComment[]
  images           AkWebzineImg[]
  contentRelations AkWebzineToFiche[]
  featuredItems    AkWebzineUne[]

  @@map("ak_webzine_articles")
}

model AkWebzineCategory {
  idCat         Int    @id @map("id_cat")
  niceUrl       String? @map("nice_url") @db.VarChar(255)
  nom           String? @db.VarChar(255)

  // Relations
  articles      AkWebzineArt2Cat[]
  subCategories AkWebzineSousCategory[]

  @@map("ak_webzine_categories")
}

model AkWebzineArt2Cat {
  idArt Int @map("id_art")
  idCat Int? @map("id_cat")

  // Relations
  article  AkWebzineArticle  @relation(fields: [idArt], references: [idArt], onDelete: Cascade)
  category AkWebzineCategory? @relation(fields: [idCat], references: [idCat], onDelete: Cascade)

  @@id([idArt])
  @@map("ak_webzine_art2cat")
}

model AkWebzineComment {
  id          Int       @id
  date        DateTime  @db.Timestamp
  nom         String?   @db.VarChar(255)
  email       String?   @db.VarChar(255)
  website     String?   @db.VarChar(255)
  ip          String?   @db.VarChar(255)
  reverseip   String?   @db.VarChar(255)
  commentaire String?   @db.Text
  moderation  Int       @db.SmallInt
  idMembre    Int       @map("id_membre") @default(0)
  idArticle   Int?      @map("id_article") @default(0)

  // Relations
  member  SmfMember?        @relation(fields: [idMembre], references: [idMember], onDelete: Cascade)
  article AkWebzineArticle? @relation(fields: [idArticle], references: [idArt], onDelete: Cascade)

  @@map("ak_webzine_com")
}

model AkWebzineImg {
  idImg  Int    @id @map("id_img")
  idArt  Int    @map("id_art")
  urlImg String? @map("url_img") @db.VarChar(255)

  // Relations
  article AkWebzineArticle @relation(fields: [idArt], references: [idArt], onDelete: Cascade)

  @@map("ak_webzine_img")
}

model AkWebzineSousCategory {
  idSousCat  Int    @id @map("id_sous_cat")
  idCat      Int    @map("id_cat")
  niceUrl    String? @map("nice_url") @db.VarChar(255)
  nom        String? @db.VarChar(255)

  // Relations
  category   AkWebzineCategory @relation(fields: [idCat], references: [idCat], onDelete: Cascade)

  @@map("ak_webzine_sous_categories")
}

model AkWebzineUne {
  idUne     Int      @id @map("id_une")
  idArticle Int      @map("id_article")
  ordre     Int?     @default(0)
  dateAjout DateTime @map("date_ajout") @db.Timestamp
  actif     Int      @db.SmallInt @default(1)

  // Relations
  article   AkWebzineArticle @relation(fields: [idArticle], references: [idArt], onDelete: Cascade)

  @@map("ak_webzine_une")
}

model AkWebzineToFiche {
  idRelation  Int    @id @default(autoincrement()) @map("id_relation")
  idArticle   Int    @map("id_article")
  idWpArticle Int    @map("id_wp_article")
  idFiche     Int    @map("id_fiche")
  type        String? @db.VarChar(255)

  // Relations
  article AkWebzineArticle @relation(fields: [idArticle], references: [idArt], onDelete: Cascade)

  @@map("ak_webzine_to_fiches")
}